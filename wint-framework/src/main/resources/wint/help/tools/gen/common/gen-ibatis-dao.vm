package ${thisPackage};

import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;

import org.springframework.orm.ibatis.SqlMapClientCallback;
import com.ibatis.sqlmap.client.SqlMapExecutor;
import ${daoFullClassName};
import ${doFullClassName};
import wint.dal.ibatis.ReadWriteSqlMapClientDaoSupport;
import wint.help.biz.query.BaseQuery;
import wint.lang.utils.CollectionUtil;
import wint.lang.utils.MapUtil;

/**
* this file is auto generate.
*/
public class ${className} extends ReadWriteSqlMapClientDaoSupport implements ${daoClassName} {


    @Override
	public ${idType} create(${domainName} ${paramName}) {
		return (${idTypeWrapper})this.getSqlMapClientTemplate().insert("${namespace}.create", ${paramName});
	}

    @Override
    public List<${idTypeWrapper}> batchCreate(final List<${domainName}> ${paramName}List) {
        if (CollectionUtil.isEmpty(${paramName}List)) {
            return CollectionUtil.newArrayList(0);
        }
        return (List<${idTypeWrapper}>)this.getSqlMapClientTemplate().execute(new SqlMapClientCallback(){
            @Override
            public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {
                List<${idTypeWrapper}> ret = CollectionUtil.newArrayList(${paramName}List.size());
                for (${domainName} ${paramName} : ${paramName}List) {
                    ret.add((${idTypeWrapper})executor.insert("${namespace}.create", ${paramName}));
                }
                return ret;
            }
        });
    }

    @Override
	public int delete(${idType} id) {
		return this.getSqlMapClientTemplate().update("${namespace}.delete", id);
	}

    @Override
    public int deleteByIds(List<${idTypeWrapper}> ids) {
        if (CollectionUtil.isEmpty(ids)) {
            return 0;
        }
        return this.getSqlMapClientTemplate().update("${namespace}.deleteByIds", ids);
    }

    @Override
	public int update(${domainName} ${paramName}) {
		return this.getSqlMapClientTemplate().update("${namespace}.update", ${paramName});
	}

    @Override
	public ${domainName} queryById(${idType} id) {
	    return (${domainName})this.getSqlMapClientTemplate().queryForObject("${namespace}.queryById", id);
	}

    @Override
    public Map<${idTypeWrapper}, ${domainName}> queryByIds(List<${idTypeWrapper}> ids) {
        if (CollectionUtil.isEmpty(ids)) {
            return MapUtil.newHashMap();
        }
        List<${domainName}> resultList = (List<${domainName}>) this.getSqlMapClientTemplate().queryForList("${namespace}.queryByIds", ids);
        Map<${idTypeWrapper}, ${domainName}> ret = MapUtil.newHashMap();
        for (${domainName} ${paramName} : resultList) {
            ret.put(${paramName}.getId(), ${paramName});
        }
        return ret;
    }

    @Override
    public List<${domainName}> queryForPage(BaseQuery query) {
        long count = (Long)this.getSqlMapClientTemplate().queryForObject("${namespace}.queryForPageCount", query);
        if (count == 0) {
            return new ArrayList<${domainName}>(0);
        }
        query.setTotalResultCount(count);
        return (List<${domainName}>)this.getSqlMapClientTemplate().queryForList("${namespace}.queryForPage", query);
    }

}